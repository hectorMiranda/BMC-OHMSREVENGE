
BMC-OHMSREVENGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b38  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002c44  08002c44  00003c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c84  08002c84  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002c84  08002c84  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002c84  08002c84  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c84  08002c84  00003c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c88  08002c88  00003c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002c8c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  08002c98  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002c98  000040a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008bd8  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001862  00000000  00000000  0000cc0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0000e470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000800  00000000  00000000  0000eed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001708a  00000000  00000000  0000f6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0e1  00000000  00000000  0002675a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000893e0  00000000  00000000  0003283b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbc1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ab0  00000000  00000000  000bbc60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000be710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c2c 	.word	0x08002c2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002c2c 	.word	0x08002c2c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f000 fac3 	bl	80006dc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000156:	f000 f867 	bl	8000228 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015a:	f000 f969 	bl	8000430 <MX_GPIO_Init>
	MX_ADC1_Init();
 800015e:	f000 f8b3 	bl	80002c8 <MX_ADC1_Init>
	MX_TIM2_Init();
 8000162:	f000 f8ef 	bl	8000344 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start(&hadc1);  //PB1
 8000166:	482c      	ldr	r0, [pc, #176]	@ (8000218 <main+0xcc>)
 8000168:	f000 fc16 	bl	8000998 <HAL_ADC_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //PA1 TIM2 CH2
 800016c:	2104      	movs	r1, #4
 800016e:	482b      	ldr	r0, [pc, #172]	@ (800021c <main+0xd0>)
 8000170:	f001 fff6 	bl	8002160 <HAL_TIM_PWM_Start>
	uint16_t readValue;
	int speed;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000174:	2200      	movs	r2, #0
 8000176:	2180      	movs	r1, #128	@ 0x80
 8000178:	4829      	ldr	r0, [pc, #164]	@ (8000220 <main+0xd4>)
 800017a:	f001 f9c9 	bl	8001510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 800017e:	2200      	movs	r2, #0
 8000180:	2120      	movs	r1, #32
 8000182:	4827      	ldr	r0, [pc, #156]	@ (8000220 <main+0xd4>)
 8000184:	f001 f9c4 	bl	8001510 <HAL_GPIO_WritePin>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
      HAL_ADC_PollForConversion(&hadc1,1000);
 8000188:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800018c:	4822      	ldr	r0, [pc, #136]	@ (8000218 <main+0xcc>)
 800018e:	f000 fcb1 	bl	8000af4 <HAL_ADC_PollForConversion>
      readValue = HAL_ADC_GetValue(&hadc1);
 8000192:	4821      	ldr	r0, [pc, #132]	@ (8000218 <main+0xcc>)
 8000194:	f000 fdb4 	bl	8000d00 <HAL_ADC_GetValue>
 8000198:	4603      	mov	r3, r0
 800019a:	807b      	strh	r3, [r7, #2]
      if (readValue < 1790) {
 800019c:	887b      	ldrh	r3, [r7, #2]
 800019e:	f240 62fd 	movw	r2, #1789	@ 0x6fd
 80001a2:	4293      	cmp	r3, r2
 80001a4:	d814      	bhi.n	80001d0 <main+0x84>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 80001a6:	2200      	movs	r2, #0
 80001a8:	2180      	movs	r1, #128	@ 0x80
 80001aa:	481d      	ldr	r0, [pc, #116]	@ (8000220 <main+0xd4>)
 80001ac:	f001 f9b0 	bl	8001510 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80001b0:	2201      	movs	r2, #1
 80001b2:	2120      	movs	r1, #32
 80001b4:	481a      	ldr	r0, [pc, #104]	@ (8000220 <main+0xd4>)
 80001b6:	f001 f9ab 	bl	8001510 <HAL_GPIO_WritePin>
        speed = (readValue - 1790) * (-1) / 3;
 80001ba:	887b      	ldrh	r3, [r7, #2]
 80001bc:	f5c3 63df 	rsb	r3, r3, #1784	@ 0x6f8
 80001c0:	3306      	adds	r3, #6
 80001c2:	4a18      	ldr	r2, [pc, #96]	@ (8000224 <main+0xd8>)
 80001c4:	fb82 1203 	smull	r1, r2, r2, r3
 80001c8:	17db      	asrs	r3, r3, #31
 80001ca:	1ad3      	subs	r3, r2, r3
 80001cc:	607b      	str	r3, [r7, #4]
 80001ce:	e01a      	b.n	8000206 <main+0xba>
      } else if (readValue > 2220) {
 80001d0:	887b      	ldrh	r3, [r7, #2]
 80001d2:	f640 02ac 	movw	r2, #2220	@ 0x8ac
 80001d6:	4293      	cmp	r3, r2
 80001d8:	d913      	bls.n	8000202 <main+0xb6>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80001da:	2200      	movs	r2, #0
 80001dc:	2120      	movs	r1, #32
 80001de:	4810      	ldr	r0, [pc, #64]	@ (8000220 <main+0xd4>)
 80001e0:	f001 f996 	bl	8001510 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 80001e4:	2201      	movs	r2, #1
 80001e6:	2180      	movs	r1, #128	@ 0x80
 80001e8:	480d      	ldr	r0, [pc, #52]	@ (8000220 <main+0xd4>)
 80001ea:	f001 f991 	bl	8001510 <HAL_GPIO_WritePin>
        speed = (readValue - 2220) / 3;
 80001ee:	887b      	ldrh	r3, [r7, #2]
 80001f0:	f6a3 03ac 	subw	r3, r3, #2220	@ 0x8ac
 80001f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000224 <main+0xd8>)
 80001f6:	fb82 1203 	smull	r1, r2, r2, r3
 80001fa:	17db      	asrs	r3, r3, #31
 80001fc:	1ad3      	subs	r3, r2, r3
 80001fe:	607b      	str	r3, [r7, #4]
 8000200:	e001      	b.n	8000206 <main+0xba>
      } else {
        speed = 0;
 8000202:	2300      	movs	r3, #0
 8000204:	607b      	str	r3, [r7, #4]
      }
      __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, speed);
 8000206:	4b05      	ldr	r3, [pc, #20]	@ (800021c <main+0xd0>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(50);
 800020e:	2032      	movs	r0, #50	@ 0x32
 8000210:	f000 fac6 	bl	80007a0 <HAL_Delay>
      HAL_ADC_PollForConversion(&hadc1,1000);
 8000214:	e7b8      	b.n	8000188 <main+0x3c>
 8000216:	bf00      	nop
 8000218:	20000028 	.word	0x20000028
 800021c:	20000058 	.word	0x20000058
 8000220:	40010800 	.word	0x40010800
 8000224:	55555556 	.word	0x55555556

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b094      	sub	sp, #80	@ 0x50
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000232:	2228      	movs	r2, #40	@ 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f002 fccc 	bl	8002bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000258:	2302      	movs	r3, #2
 800025a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025c:	2301      	movs	r3, #1
 800025e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000260:	2310      	movs	r3, #16
 8000262:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000264:	2300      	movs	r3, #0
 8000266:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000268:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800026c:	4618      	mov	r0, r3
 800026e:	f001 f967 	bl	8001540 <HAL_RCC_OscConfig>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000278:	f000 f918 	bl	80004ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027c:	230f      	movs	r3, #15
 800027e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000280:	2300      	movs	r3, #0
 8000282:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028c:	2300      	movs	r3, #0
 800028e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000290:	f107 0314 	add.w	r3, r7, #20
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f001 fbd4 	bl	8001a44 <HAL_RCC_ClockConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80002a2:	f000 f903 	bl	80004ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002a6:	2302      	movs	r3, #2
 80002a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002aa:	2300      	movs	r3, #0
 80002ac:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	4618      	mov	r0, r3
 80002b2:	f001 fd41 	bl	8001d38 <HAL_RCCEx_PeriphCLKConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002bc:	f000 f8f6 	bl	80004ac <Error_Handler>
  }
}
 80002c0:	bf00      	nop
 80002c2:	3750      	adds	r7, #80	@ 0x50
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002d8:	4b18      	ldr	r3, [pc, #96]	@ (800033c <MX_ADC1_Init+0x74>)
 80002da:	4a19      	ldr	r2, [pc, #100]	@ (8000340 <MX_ADC1_Init+0x78>)
 80002dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002de:	4b17      	ldr	r3, [pc, #92]	@ (800033c <MX_ADC1_Init+0x74>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002e4:	4b15      	ldr	r3, [pc, #84]	@ (800033c <MX_ADC1_Init+0x74>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002ea:	4b14      	ldr	r3, [pc, #80]	@ (800033c <MX_ADC1_Init+0x74>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002f0:	4b12      	ldr	r3, [pc, #72]	@ (800033c <MX_ADC1_Init+0x74>)
 80002f2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f8:	4b10      	ldr	r3, [pc, #64]	@ (800033c <MX_ADC1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002fe:	4b0f      	ldr	r3, [pc, #60]	@ (800033c <MX_ADC1_Init+0x74>)
 8000300:	2201      	movs	r2, #1
 8000302:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000304:	480d      	ldr	r0, [pc, #52]	@ (800033c <MX_ADC1_Init+0x74>)
 8000306:	f000 fa6f 	bl	80007e8 <HAL_ADC_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000310:	f000 f8cc 	bl	80004ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000314:	2309      	movs	r3, #9
 8000316:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000318:	2301      	movs	r3, #1
 800031a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800031c:	2300      	movs	r3, #0
 800031e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	4619      	mov	r1, r3
 8000324:	4805      	ldr	r0, [pc, #20]	@ (800033c <MX_ADC1_Init+0x74>)
 8000326:	f000 fcf7 	bl	8000d18 <HAL_ADC_ConfigChannel>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000330:	f000 f8bc 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000334:	bf00      	nop
 8000336:	3710      	adds	r7, #16
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000028 	.word	0x20000028
 8000340:	40012400 	.word	0x40012400

08000344 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b08e      	sub	sp, #56	@ 0x38
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800034a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000358:	f107 0320 	add.w	r3, r7, #32
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
 800036c:	60da      	str	r2, [r3, #12]
 800036e:	611a      	str	r2, [r3, #16]
 8000370:	615a      	str	r2, [r3, #20]
 8000372:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000374:	4b2d      	ldr	r3, [pc, #180]	@ (800042c <MX_TIM2_Init+0xe8>)
 8000376:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800037a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 800037c:	4b2b      	ldr	r3, [pc, #172]	@ (800042c <MX_TIM2_Init+0xe8>)
 800037e:	227f      	movs	r2, #127	@ 0x7f
 8000380:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000382:	4b2a      	ldr	r3, [pc, #168]	@ (800042c <MX_TIM2_Init+0xe8>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625;
 8000388:	4b28      	ldr	r3, [pc, #160]	@ (800042c <MX_TIM2_Init+0xe8>)
 800038a:	f240 2271 	movw	r2, #625	@ 0x271
 800038e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000390:	4b26      	ldr	r3, [pc, #152]	@ (800042c <MX_TIM2_Init+0xe8>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000396:	4b25      	ldr	r3, [pc, #148]	@ (800042c <MX_TIM2_Init+0xe8>)
 8000398:	2200      	movs	r2, #0
 800039a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800039c:	4823      	ldr	r0, [pc, #140]	@ (800042c <MX_TIM2_Init+0xe8>)
 800039e:	f001 fe37 	bl	8002010 <HAL_TIM_Base_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80003a8:	f000 f880 	bl	80004ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003b6:	4619      	mov	r1, r3
 80003b8:	481c      	ldr	r0, [pc, #112]	@ (800042c <MX_TIM2_Init+0xe8>)
 80003ba:	f002 f835 	bl	8002428 <HAL_TIM_ConfigClockSource>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80003c4:	f000 f872 	bl	80004ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003c8:	4818      	ldr	r0, [pc, #96]	@ (800042c <MX_TIM2_Init+0xe8>)
 80003ca:	f001 fe70 	bl	80020ae <HAL_TIM_PWM_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80003d4:	f000 f86a 	bl	80004ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003d8:	2300      	movs	r3, #0
 80003da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003dc:	2300      	movs	r3, #0
 80003de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003e0:	f107 0320 	add.w	r3, r7, #32
 80003e4:	4619      	mov	r1, r3
 80003e6:	4811      	ldr	r0, [pc, #68]	@ (800042c <MX_TIM2_Init+0xe8>)
 80003e8:	f002 fb96 	bl	8002b18 <HAL_TIMEx_MasterConfigSynchronization>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80003f2:	f000 f85b 	bl	80004ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003f6:	2360      	movs	r3, #96	@ 0x60
 80003f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2204      	movs	r2, #4
 800040a:	4619      	mov	r1, r3
 800040c:	4807      	ldr	r0, [pc, #28]	@ (800042c <MX_TIM2_Init+0xe8>)
 800040e:	f001 ff49 	bl	80022a4 <HAL_TIM_PWM_ConfigChannel>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000418:	f000 f848 	bl	80004ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800041c:	4803      	ldr	r0, [pc, #12]	@ (800042c <MX_TIM2_Init+0xe8>)
 800041e:	f000 f8d5 	bl	80005cc <HAL_TIM_MspPostInit>

}
 8000422:	bf00      	nop
 8000424:	3738      	adds	r7, #56	@ 0x38
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20000058 	.word	0x20000058

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	f107 0308 	add.w	r3, r7, #8
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000444:	4b17      	ldr	r3, [pc, #92]	@ (80004a4 <MX_GPIO_Init+0x74>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a16      	ldr	r2, [pc, #88]	@ (80004a4 <MX_GPIO_Init+0x74>)
 800044a:	f043 0304 	orr.w	r3, r3, #4
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b14      	ldr	r3, [pc, #80]	@ (80004a4 <MX_GPIO_Init+0x74>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0304 	and.w	r3, r3, #4
 8000458:	607b      	str	r3, [r7, #4]
 800045a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045c:	4b11      	ldr	r3, [pc, #68]	@ (80004a4 <MX_GPIO_Init+0x74>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a10      	ldr	r2, [pc, #64]	@ (80004a4 <MX_GPIO_Init+0x74>)
 8000462:	f043 0308 	orr.w	r3, r3, #8
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <MX_GPIO_Init+0x74>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0308 	and.w	r3, r3, #8
 8000470:	603b      	str	r3, [r7, #0]
 8000472:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	21a0      	movs	r1, #160	@ 0xa0
 8000478:	480b      	ldr	r0, [pc, #44]	@ (80004a8 <MX_GPIO_Init+0x78>)
 800047a:	f001 f849 	bl	8001510 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800047e:	23a0      	movs	r3, #160	@ 0xa0
 8000480:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000482:	2301      	movs	r3, #1
 8000484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	2300      	movs	r3, #0
 8000488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048a:	2302      	movs	r3, #2
 800048c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800048e:	f107 0308 	add.w	r3, r7, #8
 8000492:	4619      	mov	r1, r3
 8000494:	4804      	ldr	r0, [pc, #16]	@ (80004a8 <MX_GPIO_Init+0x78>)
 8000496:	f000 feb7 	bl	8001208 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800049a:	bf00      	nop
 800049c:	3718      	adds	r7, #24
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40010800 	.word	0x40010800

080004ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b0:	b672      	cpsid	i
}
 80004b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <Error_Handler+0x8>

080004b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004be:	4b15      	ldr	r3, [pc, #84]	@ (8000514 <HAL_MspInit+0x5c>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4a14      	ldr	r2, [pc, #80]	@ (8000514 <HAL_MspInit+0x5c>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6193      	str	r3, [r2, #24]
 80004ca:	4b12      	ldr	r3, [pc, #72]	@ (8000514 <HAL_MspInit+0x5c>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000514 <HAL_MspInit+0x5c>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	4a0e      	ldr	r2, [pc, #56]	@ (8000514 <HAL_MspInit+0x5c>)
 80004dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004e0:	61d3      	str	r3, [r2, #28]
 80004e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000514 <HAL_MspInit+0x5c>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ee:	4b0a      	ldr	r3, [pc, #40]	@ (8000518 <HAL_MspInit+0x60>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	4a04      	ldr	r2, [pc, #16]	@ (8000518 <HAL_MspInit+0x60>)
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050a:	bf00      	nop
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	40021000 	.word	0x40021000
 8000518:	40010000 	.word	0x40010000

0800051c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a14      	ldr	r2, [pc, #80]	@ (8000588 <HAL_ADC_MspInit+0x6c>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d121      	bne.n	8000580 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800053c:	4b13      	ldr	r3, [pc, #76]	@ (800058c <HAL_ADC_MspInit+0x70>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a12      	ldr	r2, [pc, #72]	@ (800058c <HAL_ADC_MspInit+0x70>)
 8000542:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b10      	ldr	r3, [pc, #64]	@ (800058c <HAL_ADC_MspInit+0x70>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000554:	4b0d      	ldr	r3, [pc, #52]	@ (800058c <HAL_ADC_MspInit+0x70>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a0c      	ldr	r2, [pc, #48]	@ (800058c <HAL_ADC_MspInit+0x70>)
 800055a:	f043 0308 	orr.w	r3, r3, #8
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b0a      	ldr	r3, [pc, #40]	@ (800058c <HAL_ADC_MspInit+0x70>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0308 	and.w	r3, r3, #8
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800056c:	2302      	movs	r3, #2
 800056e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000570:	2303      	movs	r3, #3
 8000572:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	4619      	mov	r1, r3
 800057a:	4805      	ldr	r0, [pc, #20]	@ (8000590 <HAL_ADC_MspInit+0x74>)
 800057c:	f000 fe44 	bl	8001208 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000580:	bf00      	nop
 8000582:	3720      	adds	r7, #32
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40012400 	.word	0x40012400
 800058c:	40021000 	.word	0x40021000
 8000590:	40010c00 	.word	0x40010c00

08000594 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005a4:	d10b      	bne.n	80005be <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005a6:	4b08      	ldr	r3, [pc, #32]	@ (80005c8 <HAL_TIM_Base_MspInit+0x34>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	4a07      	ldr	r2, [pc, #28]	@ (80005c8 <HAL_TIM_Base_MspInit+0x34>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	61d3      	str	r3, [r2, #28]
 80005b2:	4b05      	ldr	r3, [pc, #20]	@ (80005c8 <HAL_TIM_Base_MspInit+0x34>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	40021000 	.word	0x40021000

080005cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005ea:	d117      	bne.n	800061c <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <HAL_TIM_MspPostInit+0x58>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000624 <HAL_TIM_MspPostInit+0x58>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <HAL_TIM_MspPostInit+0x58>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000604:	2302      	movs	r3, #2
 8000606:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000608:	2302      	movs	r3, #2
 800060a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2302      	movs	r3, #2
 800060e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	4619      	mov	r1, r3
 8000616:	4804      	ldr	r0, [pc, #16]	@ (8000628 <HAL_TIM_MspPostInit+0x5c>)
 8000618:	f000 fdf6 	bl	8001208 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800061c:	bf00      	nop
 800061e:	3720      	adds	r7, #32
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000
 8000628:	40010800 	.word	0x40010800

0800062c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <NMI_Handler+0x4>

08000634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <HardFault_Handler+0x4>

0800063c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <MemManage_Handler+0x4>

08000644 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <BusFault_Handler+0x4>

0800064c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <UsageFault_Handler+0x4>

08000654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr

08000660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr

0800066c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800067c:	f000 f874 	bl	8000768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}

08000684 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000690:	f7ff fff8 	bl	8000684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000694:	480b      	ldr	r0, [pc, #44]	@ (80006c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000696:	490c      	ldr	r1, [pc, #48]	@ (80006c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000698:	4a0c      	ldr	r2, [pc, #48]	@ (80006cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800069c:	e002      	b.n	80006a4 <LoopCopyDataInit>

0800069e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006a2:	3304      	adds	r3, #4

080006a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a8:	d3f9      	bcc.n	800069e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006aa:	4a09      	ldr	r2, [pc, #36]	@ (80006d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006ac:	4c09      	ldr	r4, [pc, #36]	@ (80006d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b0:	e001      	b.n	80006b6 <LoopFillZerobss>

080006b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b4:	3204      	adds	r2, #4

080006b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b8:	d3fb      	bcc.n	80006b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006ba:	f002 fa93 	bl	8002be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006be:	f7ff fd45 	bl	800014c <main>
  bx lr
 80006c2:	4770      	bx	lr
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006cc:	08002c8c 	.word	0x08002c8c
  ldr r2, =_sbss
 80006d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006d4:	200000a4 	.word	0x200000a4

080006d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC1_2_IRQHandler>
	...

080006dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e0:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <HAL_Init+0x28>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a07      	ldr	r2, [pc, #28]	@ (8000704 <HAL_Init+0x28>)
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ec:	2003      	movs	r0, #3
 80006ee:	f000 fd57 	bl	80011a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006f2:	200f      	movs	r0, #15
 80006f4:	f000 f808 	bl	8000708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006f8:	f7ff fede 	bl	80004b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006fc:	2300      	movs	r3, #0
}
 80006fe:	4618      	mov	r0, r3
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40022000 	.word	0x40022000

08000708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000710:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_InitTick+0x54>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <HAL_InitTick+0x58>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800071e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000722:	fbb2 f3f3 	udiv	r3, r2, r3
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fd61 	bl	80011ee <HAL_SYSTICK_Config>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e00e      	b.n	8000754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2b0f      	cmp	r3, #15
 800073a:	d80a      	bhi.n	8000752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800073c:	2200      	movs	r2, #0
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
 8000744:	f000 fd37 	bl	80011b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000748:	4a06      	ldr	r2, [pc, #24]	@ (8000764 <HAL_InitTick+0x5c>)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800074e:	2300      	movs	r3, #0
 8000750:	e000      	b.n	8000754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000000 	.word	0x20000000
 8000760:	20000008 	.word	0x20000008
 8000764:	20000004 	.word	0x20000004

08000768 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800076c:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <HAL_IncTick+0x1c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	4b05      	ldr	r3, [pc, #20]	@ (8000788 <HAL_IncTick+0x20>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4413      	add	r3, r2
 8000778:	4a03      	ldr	r2, [pc, #12]	@ (8000788 <HAL_IncTick+0x20>)
 800077a:	6013      	str	r3, [r2, #0]
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr
 8000784:	20000008 	.word	0x20000008
 8000788:	200000a0 	.word	0x200000a0

0800078c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  return uwTick;
 8000790:	4b02      	ldr	r3, [pc, #8]	@ (800079c <HAL_GetTick+0x10>)
 8000792:	681b      	ldr	r3, [r3, #0]
}
 8000794:	4618      	mov	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	200000a0 	.word	0x200000a0

080007a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007a8:	f7ff fff0 	bl	800078c <HAL_GetTick>
 80007ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007b8:	d005      	beq.n	80007c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_Delay+0x44>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	4413      	add	r3, r2
 80007c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007c6:	bf00      	nop
 80007c8:	f7ff ffe0 	bl	800078c <HAL_GetTick>
 80007cc:	4602      	mov	r2, r0
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d8f7      	bhi.n	80007c8 <HAL_Delay+0x28>
  {
  }
}
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	3710      	adds	r7, #16
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000008 	.word	0x20000008

080007e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007f0:	2300      	movs	r3, #0
 80007f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80007f8:	2300      	movs	r3, #0
 80007fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d101      	bne.n	800080a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
 8000808:	e0be      	b.n	8000988 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000814:	2b00      	cmp	r3, #0
 8000816:	d109      	bne.n	800082c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff fe78 	bl	800051c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f000 fbc5 	bl	8000fbc <ADC_ConversionStop_Disable>
 8000832:	4603      	mov	r3, r0
 8000834:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800083a:	f003 0310 	and.w	r3, r3, #16
 800083e:	2b00      	cmp	r3, #0
 8000840:	f040 8099 	bne.w	8000976 <HAL_ADC_Init+0x18e>
 8000844:	7dfb      	ldrb	r3, [r7, #23]
 8000846:	2b00      	cmp	r3, #0
 8000848:	f040 8095 	bne.w	8000976 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000850:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000854:	f023 0302 	bic.w	r3, r3, #2
 8000858:	f043 0202 	orr.w	r2, r3, #2
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000868:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	7b1b      	ldrb	r3, [r3, #12]
 800086e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000870:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	4313      	orrs	r3, r2
 8000876:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000880:	d003      	beq.n	800088a <HAL_ADC_Init+0xa2>
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	689b      	ldr	r3, [r3, #8]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d102      	bne.n	8000890 <HAL_ADC_Init+0xa8>
 800088a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800088e:	e000      	b.n	8000892 <HAL_ADC_Init+0xaa>
 8000890:	2300      	movs	r3, #0
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	4313      	orrs	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	7d1b      	ldrb	r3, [r3, #20]
 800089c:	2b01      	cmp	r3, #1
 800089e:	d119      	bne.n	80008d4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	7b1b      	ldrb	r3, [r3, #12]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d109      	bne.n	80008bc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	3b01      	subs	r3, #1
 80008ae:	035a      	lsls	r2, r3, #13
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	e00b      	b.n	80008d4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008c0:	f043 0220 	orr.w	r2, r3, #32
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008cc:	f043 0201 	orr.w	r2, r3, #1
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	430a      	orrs	r2, r1
 80008e6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	689a      	ldr	r2, [r3, #8]
 80008ee:	4b28      	ldr	r3, [pc, #160]	@ (8000990 <HAL_ADC_Init+0x1a8>)
 80008f0:	4013      	ands	r3, r2
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	6812      	ldr	r2, [r2, #0]
 80008f6:	68b9      	ldr	r1, [r7, #8]
 80008f8:	430b      	orrs	r3, r1
 80008fa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000904:	d003      	beq.n	800090e <HAL_ADC_Init+0x126>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d104      	bne.n	8000918 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	691b      	ldr	r3, [r3, #16]
 8000912:	3b01      	subs	r3, #1
 8000914:	051b      	lsls	r3, r3, #20
 8000916:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800091e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	430a      	orrs	r2, r1
 800092a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	689a      	ldr	r2, [r3, #8]
 8000932:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <HAL_ADC_Init+0x1ac>)
 8000934:	4013      	ands	r3, r2
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	429a      	cmp	r2, r3
 800093a:	d10b      	bne.n	8000954 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000946:	f023 0303 	bic.w	r3, r3, #3
 800094a:	f043 0201 	orr.w	r2, r3, #1
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000952:	e018      	b.n	8000986 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000958:	f023 0312 	bic.w	r3, r3, #18
 800095c:	f043 0210 	orr.w	r2, r3, #16
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000968:	f043 0201 	orr.w	r2, r3, #1
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000970:	2301      	movs	r3, #1
 8000972:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000974:	e007      	b.n	8000986 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800097a:	f043 0210 	orr.w	r2, r3, #16
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000986:	7dfb      	ldrb	r3, [r7, #23]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	ffe1f7fd 	.word	0xffe1f7fd
 8000994:	ff1f0efe 	.word	0xff1f0efe

08000998 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d101      	bne.n	80009b2 <HAL_ADC_Start+0x1a>
 80009ae:	2302      	movs	r3, #2
 80009b0:	e098      	b.n	8000ae4 <HAL_ADC_Start+0x14c>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2201      	movs	r2, #1
 80009b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f000 faa4 	bl	8000f08 <ADC_Enable>
 80009c0:	4603      	mov	r3, r0
 80009c2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80009c4:	7bfb      	ldrb	r3, [r7, #15]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	f040 8087 	bne.w	8000ada <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80009d4:	f023 0301 	bic.w	r3, r3, #1
 80009d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a41      	ldr	r2, [pc, #260]	@ (8000aec <HAL_ADC_Start+0x154>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d105      	bne.n	80009f6 <HAL_ADC_Start+0x5e>
 80009ea:	4b41      	ldr	r3, [pc, #260]	@ (8000af0 <HAL_ADC_Start+0x158>)
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d115      	bne.n	8000a22 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009fa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d026      	beq.n	8000a5e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a14:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000a18:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a20:	e01d      	b.n	8000a5e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a26:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a2f      	ldr	r2, [pc, #188]	@ (8000af0 <HAL_ADC_Start+0x158>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d004      	beq.n	8000a42 <HAL_ADC_Start+0xaa>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a2b      	ldr	r2, [pc, #172]	@ (8000aec <HAL_ADC_Start+0x154>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d10d      	bne.n	8000a5e <HAL_ADC_Start+0xc6>
 8000a42:	4b2b      	ldr	r3, [pc, #172]	@ (8000af0 <HAL_ADC_Start+0x158>)
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d007      	beq.n	8000a5e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a52:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000a56:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d006      	beq.n	8000a78 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a6e:	f023 0206 	bic.w	r2, r3, #6
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a76:	e002      	b.n	8000a7e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f06f 0202 	mvn.w	r2, #2
 8000a8e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000a9a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000a9e:	d113      	bne.n	8000ac8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000aa4:	4a11      	ldr	r2, [pc, #68]	@ (8000aec <HAL_ADC_Start+0x154>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d105      	bne.n	8000ab6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <HAL_ADC_Start+0x158>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d108      	bne.n	8000ac8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	689a      	ldr	r2, [r3, #8]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	e00c      	b.n	8000ae2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	689a      	ldr	r2, [r3, #8]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	e003      	b.n	8000ae2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40012800 	.word	0x40012800
 8000af0:	40012400 	.word	0x40012400

08000af4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b087      	sub	sp, #28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000b0a:	f7ff fe3f 	bl	800078c <HAL_GetTick>
 8000b0e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d00b      	beq.n	8000b36 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b22:	f043 0220 	orr.w	r2, r3, #32
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e0d3      	b.n	8000cde <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d131      	bne.n	8000ba8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b4a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d12a      	bne.n	8000ba8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b52:	e021      	b.n	8000b98 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5a:	d01d      	beq.n	8000b98 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d007      	beq.n	8000b72 <HAL_ADC_PollForConversion+0x7e>
 8000b62:	f7ff fe13 	bl	800078c <HAL_GetTick>
 8000b66:	4602      	mov	r2, r0
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	683a      	ldr	r2, [r7, #0]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d212      	bcs.n	8000b98 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d10b      	bne.n	8000b98 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b84:	f043 0204 	orr.w	r2, r3, #4
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000b94:	2303      	movs	r3, #3
 8000b96:	e0a2      	b.n	8000cde <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d0d6      	beq.n	8000b54 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ba6:	e070      	b.n	8000c8a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000ba8:	4b4f      	ldr	r3, [pc, #316]	@ (8000ce8 <HAL_ADC_PollForConversion+0x1f4>)
 8000baa:	681c      	ldr	r4, [r3, #0]
 8000bac:	2002      	movs	r0, #2
 8000bae:	f001 f979 	bl	8001ea4 <HAL_RCCEx_GetPeriphCLKFreq>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	6919      	ldr	r1, [r3, #16]
 8000bbe:	4b4b      	ldr	r3, [pc, #300]	@ (8000cec <HAL_ADC_PollForConversion+0x1f8>)
 8000bc0:	400b      	ands	r3, r1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d118      	bne.n	8000bf8 <HAL_ADC_PollForConversion+0x104>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	68d9      	ldr	r1, [r3, #12]
 8000bcc:	4b48      	ldr	r3, [pc, #288]	@ (8000cf0 <HAL_ADC_PollForConversion+0x1fc>)
 8000bce:	400b      	ands	r3, r1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d111      	bne.n	8000bf8 <HAL_ADC_PollForConversion+0x104>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	6919      	ldr	r1, [r3, #16]
 8000bda:	4b46      	ldr	r3, [pc, #280]	@ (8000cf4 <HAL_ADC_PollForConversion+0x200>)
 8000bdc:	400b      	ands	r3, r1
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d108      	bne.n	8000bf4 <HAL_ADC_PollForConversion+0x100>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	68d9      	ldr	r1, [r3, #12]
 8000be8:	4b43      	ldr	r3, [pc, #268]	@ (8000cf8 <HAL_ADC_PollForConversion+0x204>)
 8000bea:	400b      	ands	r3, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <HAL_ADC_PollForConversion+0x100>
 8000bf0:	2314      	movs	r3, #20
 8000bf2:	e020      	b.n	8000c36 <HAL_ADC_PollForConversion+0x142>
 8000bf4:	2329      	movs	r3, #41	@ 0x29
 8000bf6:	e01e      	b.n	8000c36 <HAL_ADC_PollForConversion+0x142>
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6919      	ldr	r1, [r3, #16]
 8000bfe:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf4 <HAL_ADC_PollForConversion+0x200>)
 8000c00:	400b      	ands	r3, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d106      	bne.n	8000c14 <HAL_ADC_PollForConversion+0x120>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	68d9      	ldr	r1, [r3, #12]
 8000c0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000cf8 <HAL_ADC_PollForConversion+0x204>)
 8000c0e:	400b      	ands	r3, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d00d      	beq.n	8000c30 <HAL_ADC_PollForConversion+0x13c>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	6919      	ldr	r1, [r3, #16]
 8000c1a:	4b38      	ldr	r3, [pc, #224]	@ (8000cfc <HAL_ADC_PollForConversion+0x208>)
 8000c1c:	400b      	ands	r3, r1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d108      	bne.n	8000c34 <HAL_ADC_PollForConversion+0x140>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	68d9      	ldr	r1, [r3, #12]
 8000c28:	4b34      	ldr	r3, [pc, #208]	@ (8000cfc <HAL_ADC_PollForConversion+0x208>)
 8000c2a:	400b      	ands	r3, r1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d101      	bne.n	8000c34 <HAL_ADC_PollForConversion+0x140>
 8000c30:	2354      	movs	r3, #84	@ 0x54
 8000c32:	e000      	b.n	8000c36 <HAL_ADC_PollForConversion+0x142>
 8000c34:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000c36:	fb02 f303 	mul.w	r3, r2, r3
 8000c3a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c3c:	e021      	b.n	8000c82 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c44:	d01a      	beq.n	8000c7c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d007      	beq.n	8000c5c <HAL_ADC_PollForConversion+0x168>
 8000c4c:	f7ff fd9e 	bl	800078c <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	683a      	ldr	r2, [r7, #0]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d20f      	bcs.n	8000c7c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d90b      	bls.n	8000c7c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c68:	f043 0204 	orr.w	r2, r3, #4
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e030      	b.n	8000cde <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d8d9      	bhi.n	8000c3e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f06f 0212 	mvn.w	r2, #18
 8000c92:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c98:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000caa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000cae:	d115      	bne.n	8000cdc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d111      	bne.n	8000cdc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d105      	bne.n	8000cdc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cd4:	f043 0201 	orr.w	r2, r3, #1
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	371c      	adds	r7, #28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd90      	pop	{r4, r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	24924924 	.word	0x24924924
 8000cf0:	00924924 	.word	0x00924924
 8000cf4:	12492492 	.word	0x12492492
 8000cf8:	00492492 	.word	0x00492492
 8000cfc:	00249249 	.word	0x00249249

08000d00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr

08000d18 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d101      	bne.n	8000d38 <HAL_ADC_ConfigChannel+0x20>
 8000d34:	2302      	movs	r3, #2
 8000d36:	e0dc      	b.n	8000ef2 <HAL_ADC_ConfigChannel+0x1da>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b06      	cmp	r3, #6
 8000d46:	d81c      	bhi.n	8000d82 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	4613      	mov	r3, r2
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	4413      	add	r3, r2
 8000d58:	3b05      	subs	r3, #5
 8000d5a:	221f      	movs	r2, #31
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	4019      	ands	r1, r3
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	3b05      	subs	r3, #5
 8000d74:	fa00 f203 	lsl.w	r2, r0, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d80:	e03c      	b.n	8000dfc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b0c      	cmp	r3, #12
 8000d88:	d81c      	bhi.n	8000dc4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	4613      	mov	r3, r2
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	4413      	add	r3, r2
 8000d9a:	3b23      	subs	r3, #35	@ 0x23
 8000d9c:	221f      	movs	r2, #31
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	4019      	ands	r1, r3
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	6818      	ldr	r0, [r3, #0]
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	4613      	mov	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	3b23      	subs	r3, #35	@ 0x23
 8000db6:	fa00 f203 	lsl.w	r2, r0, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8000dc2:	e01b      	b.n	8000dfc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	3b41      	subs	r3, #65	@ 0x41
 8000dd6:	221f      	movs	r2, #31
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	4019      	ands	r1, r3
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	6818      	ldr	r0, [r3, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	3b41      	subs	r3, #65	@ 0x41
 8000df0:	fa00 f203 	lsl.w	r2, r0, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b09      	cmp	r3, #9
 8000e02:	d91c      	bls.n	8000e3e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68d9      	ldr	r1, [r3, #12]
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4613      	mov	r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	4413      	add	r3, r2
 8000e14:	3b1e      	subs	r3, #30
 8000e16:	2207      	movs	r2, #7
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	4019      	ands	r1, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	6898      	ldr	r0, [r3, #8]
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	4413      	add	r3, r2
 8000e2e:	3b1e      	subs	r3, #30
 8000e30:	fa00 f203 	lsl.w	r2, r0, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	e019      	b.n	8000e72 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	6919      	ldr	r1, [r3, #16]
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	4413      	add	r3, r2
 8000e4e:	2207      	movs	r2, #7
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	4019      	ands	r1, r3
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	6898      	ldr	r0, [r3, #8]
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4613      	mov	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	fa00 f203 	lsl.w	r2, r0, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b10      	cmp	r3, #16
 8000e78:	d003      	beq.n	8000e82 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e7e:	2b11      	cmp	r3, #17
 8000e80:	d132      	bne.n	8000ee8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a1d      	ldr	r2, [pc, #116]	@ (8000efc <HAL_ADC_ConfigChannel+0x1e4>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d125      	bne.n	8000ed8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d126      	bne.n	8000ee8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	689a      	ldr	r2, [r3, #8]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000ea8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b10      	cmp	r3, #16
 8000eb0:	d11a      	bne.n	8000ee8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000eb2:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <HAL_ADC_ConfigChannel+0x1e8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a13      	ldr	r2, [pc, #76]	@ (8000f04 <HAL_ADC_ConfigChannel+0x1ec>)
 8000eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebc:	0c9a      	lsrs	r2, r3, #18
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ec8:	e002      	b.n	8000ed0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f9      	bne.n	8000eca <HAL_ADC_ConfigChannel+0x1b2>
 8000ed6:	e007      	b.n	8000ee8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000edc:	f043 0220 	orr.w	r2, r3, #32
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	40012400 	.word	0x40012400
 8000f00:	20000000 	.word	0x20000000
 8000f04:	431bde83 	.word	0x431bde83

08000f08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d040      	beq.n	8000fa8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f042 0201 	orr.w	r2, r2, #1
 8000f34:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f36:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb4 <ADC_Enable+0xac>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000fb8 <ADC_Enable+0xb0>)
 8000f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f40:	0c9b      	lsrs	r3, r3, #18
 8000f42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f44:	e002      	b.n	8000f4c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1f9      	bne.n	8000f46 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f52:	f7ff fc1b 	bl	800078c <HAL_GetTick>
 8000f56:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f58:	e01f      	b.n	8000f9a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f5a:	f7ff fc17 	bl	800078c <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d918      	bls.n	8000f9a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d011      	beq.n	8000f9a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f7a:	f043 0210 	orr.w	r2, r3, #16
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f86:	f043 0201 	orr.w	r2, r3, #1
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e007      	b.n	8000faa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d1d8      	bne.n	8000f5a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	431bde83 	.word	0x431bde83

08000fbc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d12e      	bne.n	8001034 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 0201 	bic.w	r2, r2, #1
 8000fe4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fe6:	f7ff fbd1 	bl	800078c <HAL_GetTick>
 8000fea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000fec:	e01b      	b.n	8001026 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000fee:	f7ff fbcd 	bl	800078c <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d914      	bls.n	8001026 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	2b01      	cmp	r3, #1
 8001008:	d10d      	bne.n	8001026 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800100e:	f043 0210 	orr.w	r2, r3, #16
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800101a:	f043 0201 	orr.w	r2, r3, #1
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e007      	b.n	8001036 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b01      	cmp	r3, #1
 8001032:	d0dc      	beq.n	8000fee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001068:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800106c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	6039      	str	r1, [r7, #0]
 80010ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	db0a      	blt.n	80010ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	490c      	ldr	r1, [pc, #48]	@ (80010f0 <__NVIC_SetPriority+0x4c>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	0112      	lsls	r2, r2, #4
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	440b      	add	r3, r1
 80010c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010cc:	e00a      	b.n	80010e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4908      	ldr	r1, [pc, #32]	@ (80010f4 <__NVIC_SetPriority+0x50>)
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	3b04      	subs	r3, #4
 80010dc:	0112      	lsls	r2, r2, #4
 80010de:	b2d2      	uxtb	r2, r2
 80010e0:	440b      	add	r3, r1
 80010e2:	761a      	strb	r2, [r3, #24]
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000e100 	.word	0xe000e100
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	@ 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f1c3 0307 	rsb	r3, r3, #7
 8001112:	2b04      	cmp	r3, #4
 8001114:	bf28      	it	cs
 8001116:	2304      	movcs	r3, #4
 8001118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3304      	adds	r3, #4
 800111e:	2b06      	cmp	r3, #6
 8001120:	d902      	bls.n	8001128 <NVIC_EncodePriority+0x30>
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3b03      	subs	r3, #3
 8001126:	e000      	b.n	800112a <NVIC_EncodePriority+0x32>
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	f04f 32ff 	mov.w	r2, #4294967295
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43da      	mvns	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	401a      	ands	r2, r3
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001140:	f04f 31ff 	mov.w	r1, #4294967295
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	fa01 f303 	lsl.w	r3, r1, r3
 800114a:	43d9      	mvns	r1, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001150:	4313      	orrs	r3, r2
         );
}
 8001152:	4618      	mov	r0, r3
 8001154:	3724      	adds	r7, #36	@ 0x24
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800116c:	d301      	bcc.n	8001172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116e:	2301      	movs	r3, #1
 8001170:	e00f      	b.n	8001192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001172:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <SysTick_Config+0x40>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800117a:	210f      	movs	r1, #15
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	f7ff ff90 	bl	80010a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <SysTick_Config+0x40>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118a:	4b04      	ldr	r3, [pc, #16]	@ (800119c <SysTick_Config+0x40>)
 800118c:	2207      	movs	r2, #7
 800118e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	e000e010 	.word	0xe000e010

080011a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff49 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
 80011c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c8:	f7ff ff5e 	bl	8001088 <__NVIC_GetPriorityGrouping>
 80011cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	68b9      	ldr	r1, [r7, #8]
 80011d2:	6978      	ldr	r0, [r7, #20]
 80011d4:	f7ff ff90 	bl	80010f8 <NVIC_EncodePriority>
 80011d8:	4602      	mov	r2, r0
 80011da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011de:	4611      	mov	r1, r2
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff5f 	bl	80010a4 <__NVIC_SetPriority>
}
 80011e6:	bf00      	nop
 80011e8:	3718      	adds	r7, #24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffb0 	bl	800115c <SysTick_Config>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001208:	b480      	push	{r7}
 800120a:	b08b      	sub	sp, #44	@ 0x2c
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001212:	2300      	movs	r3, #0
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800121a:	e169      	b.n	80014f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800121c:	2201      	movs	r2, #1
 800121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	69fa      	ldr	r2, [r7, #28]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	429a      	cmp	r2, r3
 8001236:	f040 8158 	bne.w	80014ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	4a9a      	ldr	r2, [pc, #616]	@ (80014a8 <HAL_GPIO_Init+0x2a0>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d05e      	beq.n	8001302 <HAL_GPIO_Init+0xfa>
 8001244:	4a98      	ldr	r2, [pc, #608]	@ (80014a8 <HAL_GPIO_Init+0x2a0>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d875      	bhi.n	8001336 <HAL_GPIO_Init+0x12e>
 800124a:	4a98      	ldr	r2, [pc, #608]	@ (80014ac <HAL_GPIO_Init+0x2a4>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d058      	beq.n	8001302 <HAL_GPIO_Init+0xfa>
 8001250:	4a96      	ldr	r2, [pc, #600]	@ (80014ac <HAL_GPIO_Init+0x2a4>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d86f      	bhi.n	8001336 <HAL_GPIO_Init+0x12e>
 8001256:	4a96      	ldr	r2, [pc, #600]	@ (80014b0 <HAL_GPIO_Init+0x2a8>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d052      	beq.n	8001302 <HAL_GPIO_Init+0xfa>
 800125c:	4a94      	ldr	r2, [pc, #592]	@ (80014b0 <HAL_GPIO_Init+0x2a8>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d869      	bhi.n	8001336 <HAL_GPIO_Init+0x12e>
 8001262:	4a94      	ldr	r2, [pc, #592]	@ (80014b4 <HAL_GPIO_Init+0x2ac>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d04c      	beq.n	8001302 <HAL_GPIO_Init+0xfa>
 8001268:	4a92      	ldr	r2, [pc, #584]	@ (80014b4 <HAL_GPIO_Init+0x2ac>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d863      	bhi.n	8001336 <HAL_GPIO_Init+0x12e>
 800126e:	4a92      	ldr	r2, [pc, #584]	@ (80014b8 <HAL_GPIO_Init+0x2b0>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d046      	beq.n	8001302 <HAL_GPIO_Init+0xfa>
 8001274:	4a90      	ldr	r2, [pc, #576]	@ (80014b8 <HAL_GPIO_Init+0x2b0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d85d      	bhi.n	8001336 <HAL_GPIO_Init+0x12e>
 800127a:	2b12      	cmp	r3, #18
 800127c:	d82a      	bhi.n	80012d4 <HAL_GPIO_Init+0xcc>
 800127e:	2b12      	cmp	r3, #18
 8001280:	d859      	bhi.n	8001336 <HAL_GPIO_Init+0x12e>
 8001282:	a201      	add	r2, pc, #4	@ (adr r2, 8001288 <HAL_GPIO_Init+0x80>)
 8001284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001288:	08001303 	.word	0x08001303
 800128c:	080012dd 	.word	0x080012dd
 8001290:	080012ef 	.word	0x080012ef
 8001294:	08001331 	.word	0x08001331
 8001298:	08001337 	.word	0x08001337
 800129c:	08001337 	.word	0x08001337
 80012a0:	08001337 	.word	0x08001337
 80012a4:	08001337 	.word	0x08001337
 80012a8:	08001337 	.word	0x08001337
 80012ac:	08001337 	.word	0x08001337
 80012b0:	08001337 	.word	0x08001337
 80012b4:	08001337 	.word	0x08001337
 80012b8:	08001337 	.word	0x08001337
 80012bc:	08001337 	.word	0x08001337
 80012c0:	08001337 	.word	0x08001337
 80012c4:	08001337 	.word	0x08001337
 80012c8:	08001337 	.word	0x08001337
 80012cc:	080012e5 	.word	0x080012e5
 80012d0:	080012f9 	.word	0x080012f9
 80012d4:	4a79      	ldr	r2, [pc, #484]	@ (80014bc <HAL_GPIO_Init+0x2b4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d013      	beq.n	8001302 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012da:	e02c      	b.n	8001336 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	623b      	str	r3, [r7, #32]
          break;
 80012e2:	e029      	b.n	8001338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	3304      	adds	r3, #4
 80012ea:	623b      	str	r3, [r7, #32]
          break;
 80012ec:	e024      	b.n	8001338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	3308      	adds	r3, #8
 80012f4:	623b      	str	r3, [r7, #32]
          break;
 80012f6:	e01f      	b.n	8001338 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	330c      	adds	r3, #12
 80012fe:	623b      	str	r3, [r7, #32]
          break;
 8001300:	e01a      	b.n	8001338 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800130a:	2304      	movs	r3, #4
 800130c:	623b      	str	r3, [r7, #32]
          break;
 800130e:	e013      	b.n	8001338 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d105      	bne.n	8001324 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001318:	2308      	movs	r3, #8
 800131a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69fa      	ldr	r2, [r7, #28]
 8001320:	611a      	str	r2, [r3, #16]
          break;
 8001322:	e009      	b.n	8001338 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001324:	2308      	movs	r3, #8
 8001326:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69fa      	ldr	r2, [r7, #28]
 800132c:	615a      	str	r2, [r3, #20]
          break;
 800132e:	e003      	b.n	8001338 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
          break;
 8001334:	e000      	b.n	8001338 <HAL_GPIO_Init+0x130>
          break;
 8001336:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	2bff      	cmp	r3, #255	@ 0xff
 800133c:	d801      	bhi.n	8001342 <HAL_GPIO_Init+0x13a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	e001      	b.n	8001346 <HAL_GPIO_Init+0x13e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3304      	adds	r3, #4
 8001346:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	2bff      	cmp	r3, #255	@ 0xff
 800134c:	d802      	bhi.n	8001354 <HAL_GPIO_Init+0x14c>
 800134e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	e002      	b.n	800135a <HAL_GPIO_Init+0x152>
 8001354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001356:	3b08      	subs	r3, #8
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	210f      	movs	r1, #15
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	401a      	ands	r2, r3
 800136c:	6a39      	ldr	r1, [r7, #32]
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	fa01 f303 	lsl.w	r3, r1, r3
 8001374:	431a      	orrs	r2, r3
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 80b1 	beq.w	80014ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001388:	4b4d      	ldr	r3, [pc, #308]	@ (80014c0 <HAL_GPIO_Init+0x2b8>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4a4c      	ldr	r2, [pc, #304]	@ (80014c0 <HAL_GPIO_Init+0x2b8>)
 800138e:	f043 0301 	orr.w	r3, r3, #1
 8001392:	6193      	str	r3, [r2, #24]
 8001394:	4b4a      	ldr	r3, [pc, #296]	@ (80014c0 <HAL_GPIO_Init+0x2b8>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013a0:	4a48      	ldr	r2, [pc, #288]	@ (80014c4 <HAL_GPIO_Init+0x2bc>)
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3302      	adds	r3, #2
 80013a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	220f      	movs	r2, #15
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	4013      	ands	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a40      	ldr	r2, [pc, #256]	@ (80014c8 <HAL_GPIO_Init+0x2c0>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d013      	beq.n	80013f4 <HAL_GPIO_Init+0x1ec>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a3f      	ldr	r2, [pc, #252]	@ (80014cc <HAL_GPIO_Init+0x2c4>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d00d      	beq.n	80013f0 <HAL_GPIO_Init+0x1e8>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a3e      	ldr	r2, [pc, #248]	@ (80014d0 <HAL_GPIO_Init+0x2c8>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d007      	beq.n	80013ec <HAL_GPIO_Init+0x1e4>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	4a3d      	ldr	r2, [pc, #244]	@ (80014d4 <HAL_GPIO_Init+0x2cc>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d101      	bne.n	80013e8 <HAL_GPIO_Init+0x1e0>
 80013e4:	2303      	movs	r3, #3
 80013e6:	e006      	b.n	80013f6 <HAL_GPIO_Init+0x1ee>
 80013e8:	2304      	movs	r3, #4
 80013ea:	e004      	b.n	80013f6 <HAL_GPIO_Init+0x1ee>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e002      	b.n	80013f6 <HAL_GPIO_Init+0x1ee>
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <HAL_GPIO_Init+0x1ee>
 80013f4:	2300      	movs	r3, #0
 80013f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013f8:	f002 0203 	and.w	r2, r2, #3
 80013fc:	0092      	lsls	r2, r2, #2
 80013fe:	4093      	lsls	r3, r2
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001406:	492f      	ldr	r1, [pc, #188]	@ (80014c4 <HAL_GPIO_Init+0x2bc>)
 8001408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	3302      	adds	r3, #2
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d006      	beq.n	800142e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001420:	4b2d      	ldr	r3, [pc, #180]	@ (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	492c      	ldr	r1, [pc, #176]	@ (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	608b      	str	r3, [r1, #8]
 800142c:	e006      	b.n	800143c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800142e:	4b2a      	ldr	r3, [pc, #168]	@ (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	43db      	mvns	r3, r3
 8001436:	4928      	ldr	r1, [pc, #160]	@ (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001438:	4013      	ands	r3, r2
 800143a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d006      	beq.n	8001456 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001448:	4b23      	ldr	r3, [pc, #140]	@ (80014d8 <HAL_GPIO_Init+0x2d0>)
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	4922      	ldr	r1, [pc, #136]	@ (80014d8 <HAL_GPIO_Init+0x2d0>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	60cb      	str	r3, [r1, #12]
 8001454:	e006      	b.n	8001464 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001456:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	43db      	mvns	r3, r3
 800145e:	491e      	ldr	r1, [pc, #120]	@ (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001460:	4013      	ands	r3, r2
 8001462:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d006      	beq.n	800147e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001470:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4918      	ldr	r1, [pc, #96]	@ (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
 800147c:	e006      	b.n	800148c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800147e:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	43db      	mvns	r3, r3
 8001486:	4914      	ldr	r1, [pc, #80]	@ (80014d8 <HAL_GPIO_Init+0x2d0>)
 8001488:	4013      	ands	r3, r2
 800148a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d021      	beq.n	80014dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001498:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <HAL_GPIO_Init+0x2d0>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	490e      	ldr	r1, [pc, #56]	@ (80014d8 <HAL_GPIO_Init+0x2d0>)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
 80014a4:	e021      	b.n	80014ea <HAL_GPIO_Init+0x2e2>
 80014a6:	bf00      	nop
 80014a8:	10320000 	.word	0x10320000
 80014ac:	10310000 	.word	0x10310000
 80014b0:	10220000 	.word	0x10220000
 80014b4:	10210000 	.word	0x10210000
 80014b8:	10120000 	.word	0x10120000
 80014bc:	10110000 	.word	0x10110000
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010000 	.word	0x40010000
 80014c8:	40010800 	.word	0x40010800
 80014cc:	40010c00 	.word	0x40010c00
 80014d0:	40011000 	.word	0x40011000
 80014d4:	40011400 	.word	0x40011400
 80014d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014dc:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <HAL_GPIO_Init+0x304>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	4909      	ldr	r1, [pc, #36]	@ (800150c <HAL_GPIO_Init+0x304>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ec:	3301      	adds	r3, #1
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f6:	fa22 f303 	lsr.w	r3, r2, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f47f ae8e 	bne.w	800121c <HAL_GPIO_Init+0x14>
  }
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	372c      	adds	r7, #44	@ 0x2c
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	40010400 	.word	0x40010400

08001510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
 800151c:	4613      	mov	r3, r2
 800151e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001520:	787b      	ldrb	r3, [r7, #1]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001526:	887a      	ldrh	r2, [r7, #2]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800152c:	e003      	b.n	8001536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800152e:	887b      	ldrh	r3, [r7, #2]
 8001530:	041a      	lsls	r2, r3, #16
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	611a      	str	r2, [r3, #16]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr

08001540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e272      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8087 	beq.w	800166e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001560:	4b92      	ldr	r3, [pc, #584]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 030c 	and.w	r3, r3, #12
 8001568:	2b04      	cmp	r3, #4
 800156a:	d00c      	beq.n	8001586 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800156c:	4b8f      	ldr	r3, [pc, #572]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f003 030c 	and.w	r3, r3, #12
 8001574:	2b08      	cmp	r3, #8
 8001576:	d112      	bne.n	800159e <HAL_RCC_OscConfig+0x5e>
 8001578:	4b8c      	ldr	r3, [pc, #560]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001584:	d10b      	bne.n	800159e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001586:	4b89      	ldr	r3, [pc, #548]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d06c      	beq.n	800166c <HAL_RCC_OscConfig+0x12c>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d168      	bne.n	800166c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e24c      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015a6:	d106      	bne.n	80015b6 <HAL_RCC_OscConfig+0x76>
 80015a8:	4b80      	ldr	r3, [pc, #512]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a7f      	ldr	r2, [pc, #508]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	e02e      	b.n	8001614 <HAL_RCC_OscConfig+0xd4>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x98>
 80015be:	4b7b      	ldr	r3, [pc, #492]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a7a      	ldr	r2, [pc, #488]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	4b78      	ldr	r3, [pc, #480]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a77      	ldr	r2, [pc, #476]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e01d      	b.n	8001614 <HAL_RCC_OscConfig+0xd4>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015e0:	d10c      	bne.n	80015fc <HAL_RCC_OscConfig+0xbc>
 80015e2:	4b72      	ldr	r3, [pc, #456]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a71      	ldr	r2, [pc, #452]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	4b6f      	ldr	r3, [pc, #444]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a6e      	ldr	r2, [pc, #440]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e00b      	b.n	8001614 <HAL_RCC_OscConfig+0xd4>
 80015fc:	4b6b      	ldr	r3, [pc, #428]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a6a      	ldr	r2, [pc, #424]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b68      	ldr	r3, [pc, #416]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a67      	ldr	r2, [pc, #412]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 800160e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001612:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d013      	beq.n	8001644 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff f8b6 	bl	800078c <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff f8b2 	bl	800078c <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	@ 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e200      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001636:	4b5d      	ldr	r3, [pc, #372]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0xe4>
 8001642:	e014      	b.n	800166e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff f8a2 	bl	800078c <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff f89e 	bl	800078c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b64      	cmp	r3, #100	@ 0x64
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e1ec      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800165e:	4b53      	ldr	r3, [pc, #332]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x10c>
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d063      	beq.n	8001742 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800167a:	4b4c      	ldr	r3, [pc, #304]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00b      	beq.n	800169e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001686:	4b49      	ldr	r3, [pc, #292]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b08      	cmp	r3, #8
 8001690:	d11c      	bne.n	80016cc <HAL_RCC_OscConfig+0x18c>
 8001692:	4b46      	ldr	r3, [pc, #280]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d116      	bne.n	80016cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169e:	4b43      	ldr	r3, [pc, #268]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d005      	beq.n	80016b6 <HAL_RCC_OscConfig+0x176>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e1c0      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b6:	4b3d      	ldr	r3, [pc, #244]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4939      	ldr	r1, [pc, #228]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ca:	e03a      	b.n	8001742 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d020      	beq.n	8001716 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d4:	4b36      	ldr	r3, [pc, #216]	@ (80017b0 <HAL_RCC_OscConfig+0x270>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff f857 	bl	800078c <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e2:	f7ff f853 	bl	800078c <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e1a1      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f4:	4b2d      	ldr	r3, [pc, #180]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001700:	4b2a      	ldr	r3, [pc, #168]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4927      	ldr	r1, [pc, #156]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001710:	4313      	orrs	r3, r2
 8001712:	600b      	str	r3, [r1, #0]
 8001714:	e015      	b.n	8001742 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001716:	4b26      	ldr	r3, [pc, #152]	@ (80017b0 <HAL_RCC_OscConfig+0x270>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171c:	f7ff f836 	bl	800078c <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001724:	f7ff f832 	bl	800078c <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e180      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001736:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d03a      	beq.n	80017c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d019      	beq.n	800178a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001756:	4b17      	ldr	r3, [pc, #92]	@ (80017b4 <HAL_RCC_OscConfig+0x274>)
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175c:	f7ff f816 	bl	800078c <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001764:	f7ff f812 	bl	800078c <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e160      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001776:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <HAL_RCC_OscConfig+0x26c>)
 8001778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001782:	2001      	movs	r0, #1
 8001784:	f000 faba 	bl	8001cfc <RCC_Delay>
 8001788:	e01c      	b.n	80017c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800178a:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <HAL_RCC_OscConfig+0x274>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001790:	f7fe fffc 	bl	800078c <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001796:	e00f      	b.n	80017b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001798:	f7fe fff8 	bl	800078c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d908      	bls.n	80017b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e146      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	42420000 	.word	0x42420000
 80017b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b8:	4b92      	ldr	r3, [pc, #584]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80017ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1e9      	bne.n	8001798 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80a6 	beq.w	800191e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017d2:	2300      	movs	r3, #0
 80017d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017d6:	4b8b      	ldr	r3, [pc, #556]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10d      	bne.n	80017fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4b88      	ldr	r3, [pc, #544]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a87      	ldr	r2, [pc, #540]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ec:	61d3      	str	r3, [r2, #28]
 80017ee:	4b85      	ldr	r3, [pc, #532]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017fa:	2301      	movs	r3, #1
 80017fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017fe:	4b82      	ldr	r3, [pc, #520]	@ (8001a08 <HAL_RCC_OscConfig+0x4c8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001806:	2b00      	cmp	r3, #0
 8001808:	d118      	bne.n	800183c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800180a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a08 <HAL_RCC_OscConfig+0x4c8>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a08 <HAL_RCC_OscConfig+0x4c8>)
 8001810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001816:	f7fe ffb9 	bl	800078c <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181e:	f7fe ffb5 	bl	800078c <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b64      	cmp	r3, #100	@ 0x64
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e103      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001830:	4b75      	ldr	r3, [pc, #468]	@ (8001a08 <HAL_RCC_OscConfig+0x4c8>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x312>
 8001844:	4b6f      	ldr	r3, [pc, #444]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4a6e      	ldr	r2, [pc, #440]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6213      	str	r3, [r2, #32]
 8001850:	e02d      	b.n	80018ae <HAL_RCC_OscConfig+0x36e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0x334>
 800185a:	4b6a      	ldr	r3, [pc, #424]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	4a69      	ldr	r2, [pc, #420]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	6213      	str	r3, [r2, #32]
 8001866:	4b67      	ldr	r3, [pc, #412]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	4a66      	ldr	r2, [pc, #408]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	f023 0304 	bic.w	r3, r3, #4
 8001870:	6213      	str	r3, [r2, #32]
 8001872:	e01c      	b.n	80018ae <HAL_RCC_OscConfig+0x36e>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	2b05      	cmp	r3, #5
 800187a:	d10c      	bne.n	8001896 <HAL_RCC_OscConfig+0x356>
 800187c:	4b61      	ldr	r3, [pc, #388]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	4a60      	ldr	r2, [pc, #384]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6213      	str	r3, [r2, #32]
 8001888:	4b5e      	ldr	r3, [pc, #376]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	4a5d      	ldr	r2, [pc, #372]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	6213      	str	r3, [r2, #32]
 8001894:	e00b      	b.n	80018ae <HAL_RCC_OscConfig+0x36e>
 8001896:	4b5b      	ldr	r3, [pc, #364]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	4a5a      	ldr	r2, [pc, #360]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	6213      	str	r3, [r2, #32]
 80018a2:	4b58      	ldr	r3, [pc, #352]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4a57      	ldr	r2, [pc, #348]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	f023 0304 	bic.w	r3, r3, #4
 80018ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d015      	beq.n	80018e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b6:	f7fe ff69 	bl	800078c <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018bc:	e00a      	b.n	80018d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018be:	f7fe ff65 	bl	800078c <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e0b1      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0ee      	beq.n	80018be <HAL_RCC_OscConfig+0x37e>
 80018e0:	e014      	b.n	800190c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e2:	f7fe ff53 	bl	800078c <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e8:	e00a      	b.n	8001900 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ea:	f7fe ff4f 	bl	800078c <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e09b      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001900:	4b40      	ldr	r3, [pc, #256]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1ee      	bne.n	80018ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d105      	bne.n	800191e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001912:	4b3c      	ldr	r3, [pc, #240]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	4a3b      	ldr	r2, [pc, #236]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800191c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 8087 	beq.w	8001a36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001928:	4b36      	ldr	r3, [pc, #216]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	d061      	beq.n	80019f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	2b02      	cmp	r3, #2
 800193a:	d146      	bne.n	80019ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193c:	4b33      	ldr	r3, [pc, #204]	@ (8001a0c <HAL_RCC_OscConfig+0x4cc>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7fe ff23 	bl	800078c <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194a:	f7fe ff1f 	bl	800078c <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e06d      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800195c:	4b29      	ldr	r3, [pc, #164]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001970:	d108      	bne.n	8001984 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001972:	4b24      	ldr	r3, [pc, #144]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	4921      	ldr	r1, [pc, #132]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001984:	4b1f      	ldr	r3, [pc, #124]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a19      	ldr	r1, [r3, #32]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001994:	430b      	orrs	r3, r1
 8001996:	491b      	ldr	r1, [pc, #108]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800199c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a0c <HAL_RCC_OscConfig+0x4cc>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7fe fef3 	bl	800078c <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019aa:	f7fe feef 	bl	800078c <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e03d      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019bc:	4b11      	ldr	r3, [pc, #68]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x46a>
 80019c8:	e035      	b.n	8001a36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ca:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <HAL_RCC_OscConfig+0x4cc>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7fe fedc 	bl	800078c <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7fe fed8 	bl	800078c <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e026      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x498>
 80019f6:	e01e      	b.n	8001a36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d107      	bne.n	8001a10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e019      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40007000 	.word	0x40007000
 8001a0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a10:	4b0b      	ldr	r3, [pc, #44]	@ (8001a40 <HAL_RCC_OscConfig+0x500>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d001      	beq.n	8001a36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000

08001a44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e0d0      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a58:	4b6a      	ldr	r3, [pc, #424]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d910      	bls.n	8001a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a66:	4b67      	ldr	r3, [pc, #412]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 0207 	bic.w	r2, r3, #7
 8001a6e:	4965      	ldr	r1, [pc, #404]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a76:	4b63      	ldr	r3, [pc, #396]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0b8      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d020      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa0:	4b59      	ldr	r3, [pc, #356]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4a58      	ldr	r2, [pc, #352]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001aaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0308 	and.w	r3, r3, #8
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d005      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab8:	4b53      	ldr	r3, [pc, #332]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	4a52      	ldr	r2, [pc, #328]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001ac2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac4:	4b50      	ldr	r3, [pc, #320]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	494d      	ldr	r1, [pc, #308]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d040      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aea:	4b47      	ldr	r3, [pc, #284]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d115      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e07f      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b02:	4b41      	ldr	r3, [pc, #260]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d109      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e073      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b12:	4b3d      	ldr	r3, [pc, #244]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e06b      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b22:	4b39      	ldr	r3, [pc, #228]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f023 0203 	bic.w	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4936      	ldr	r1, [pc, #216]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b34:	f7fe fe2a 	bl	800078c <HAL_GetTick>
 8001b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3c:	f7fe fe26 	bl	800078c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e053      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b52:	4b2d      	ldr	r3, [pc, #180]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 020c 	and.w	r2, r3, #12
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d1eb      	bne.n	8001b3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b64:	4b27      	ldr	r3, [pc, #156]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d210      	bcs.n	8001b94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b24      	ldr	r3, [pc, #144]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 0207 	bic.w	r2, r3, #7
 8001b7a:	4922      	ldr	r1, [pc, #136]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b20      	ldr	r3, [pc, #128]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e032      	b.n	8001bfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d008      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba0:	4b19      	ldr	r3, [pc, #100]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4916      	ldr	r1, [pc, #88]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d009      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bbe:	4b12      	ldr	r3, [pc, #72]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	490e      	ldr	r1, [pc, #56]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bd2:	f000 f821 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 030f 	and.w	r3, r3, #15
 8001be2:	490a      	ldr	r1, [pc, #40]	@ (8001c0c <HAL_RCC_ClockConfig+0x1c8>)
 8001be4:	5ccb      	ldrb	r3, [r1, r3]
 8001be6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bea:	4a09      	ldr	r2, [pc, #36]	@ (8001c10 <HAL_RCC_ClockConfig+0x1cc>)
 8001bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bee:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <HAL_RCC_ClockConfig+0x1d0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fd88 	bl	8000708 <HAL_InitTick>

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40022000 	.word	0x40022000
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	08002c44 	.word	0x08002c44
 8001c10:	20000000 	.word	0x20000000
 8001c14:	20000004 	.word	0x20000004

08001c18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c32:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x94>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d002      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0x30>
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d003      	beq.n	8001c4e <HAL_RCC_GetSysClockFreq+0x36>
 8001c46:	e027      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c48:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c4a:	613b      	str	r3, [r7, #16]
      break;
 8001c4c:	e027      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	0c9b      	lsrs	r3, r3, #18
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	4a17      	ldr	r2, [pc, #92]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c58:	5cd3      	ldrb	r3, [r2, r3]
 8001c5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d010      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c66:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x94>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	0c5b      	lsrs	r3, r3, #17
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	4a11      	ldr	r2, [pc, #68]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c72:	5cd3      	ldrb	r3, [r2, r3]
 8001c74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c7a:	fb03 f202 	mul.w	r2, r3, r2
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	e004      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8001cbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c8c:	fb02 f303 	mul.w	r3, r2, r3
 8001c90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	613b      	str	r3, [r7, #16]
      break;
 8001c96:	e002      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c98:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c9a:	613b      	str	r3, [r7, #16]
      break;
 8001c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c9e:	693b      	ldr	r3, [r7, #16]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	371c      	adds	r7, #28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	007a1200 	.word	0x007a1200
 8001cb4:	08002c5c 	.word	0x08002c5c
 8001cb8:	08002c6c 	.word	0x08002c6c
 8001cbc:	003d0900 	.word	0x003d0900

08001cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc4:	4b02      	ldr	r3, [pc, #8]	@ (8001cd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cd8:	f7ff fff2 	bl	8001cc0 <HAL_RCC_GetHCLKFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	0adb      	lsrs	r3, r3, #11
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4903      	ldr	r1, [pc, #12]	@ (8001cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	08002c54 	.word	0x08002c54

08001cfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d04:	4b0a      	ldr	r3, [pc, #40]	@ (8001d30 <RCC_Delay+0x34>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <RCC_Delay+0x38>)
 8001d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0e:	0a5b      	lsrs	r3, r3, #9
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d18:	bf00      	nop
  }
  while (Delay --);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1e5a      	subs	r2, r3, #1
 8001d1e:	60fa      	str	r2, [r7, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f9      	bne.n	8001d18 <RCC_Delay+0x1c>
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	20000000 	.word	0x20000000
 8001d34:	10624dd3 	.word	0x10624dd3

08001d38 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d07d      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001d54:	2300      	movs	r3, #0
 8001d56:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d58:	4b4f      	ldr	r3, [pc, #316]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10d      	bne.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d64:	4b4c      	ldr	r3, [pc, #304]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	4a4b      	ldr	r2, [pc, #300]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d6e:	61d3      	str	r3, [r2, #28]
 8001d70:	4b49      	ldr	r3, [pc, #292]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d80:	4b46      	ldr	r3, [pc, #280]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d118      	bne.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8c:	4b43      	ldr	r3, [pc, #268]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a42      	ldr	r2, [pc, #264]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d98:	f7fe fcf8 	bl	800078c <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9e:	e008      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da0:	f7fe fcf4 	bl	800078c <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b64      	cmp	r3, #100	@ 0x64
 8001dac:	d901      	bls.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e06d      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db2:	4b3a      	ldr	r3, [pc, #232]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f0      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dbe:	4b36      	ldr	r3, [pc, #216]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dc6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d02e      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d027      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001de4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001de6:	4b2e      	ldr	r3, [pc, #184]	@ (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dec:	4b2c      	ldr	r3, [pc, #176]	@ (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001df2:	4a29      	ldr	r2, [pc, #164]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d014      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7fe fcc3 	bl	800078c <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e08:	e00a      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7fe fcbf 	bl	800078c <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e036      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e20:	4b1d      	ldr	r3, [pc, #116]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0ee      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	4917      	ldr	r1, [pc, #92]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e3e:	7dfb      	ldrb	r3, [r7, #23]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d105      	bne.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e44:	4b14      	ldr	r3, [pc, #80]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	4a13      	ldr	r2, [pc, #76]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	490b      	ldr	r1, [pc, #44]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e7a:	4b07      	ldr	r3, [pc, #28]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	4904      	ldr	r1, [pc, #16]	@ (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	42420440 	.word	0x42420440

08001ea4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b10      	cmp	r3, #16
 8001ec4:	d00a      	beq.n	8001edc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b10      	cmp	r3, #16
 8001eca:	f200 808a 	bhi.w	8001fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d045      	beq.n	8001f60 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d075      	beq.n	8001fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001eda:	e082      	b.n	8001fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001edc:	4b46      	ldr	r3, [pc, #280]	@ (8001ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001ee2:	4b45      	ldr	r3, [pc, #276]	@ (8001ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d07b      	beq.n	8001fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	0c9b      	lsrs	r3, r3, #18
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	4a41      	ldr	r2, [pc, #260]	@ (8001ffc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001ef8:	5cd3      	ldrb	r3, [r2, r3]
 8001efa:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d015      	beq.n	8001f32 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f06:	4b3c      	ldr	r3, [pc, #240]	@ (8001ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	0c5b      	lsrs	r3, r3, #17
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	4a3b      	ldr	r2, [pc, #236]	@ (8002000 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001f12:	5cd3      	ldrb	r3, [r2, r3]
 8001f14:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00d      	beq.n	8001f3c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001f20:	4a38      	ldr	r2, [pc, #224]	@ (8002004 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	fb02 f303 	mul.w	r3, r2, r3
 8001f2e:	61fb      	str	r3, [r7, #28]
 8001f30:	e004      	b.n	8001f3c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4a34      	ldr	r2, [pc, #208]	@ (8002008 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001f36:	fb02 f303 	mul.w	r3, r2, r3
 8001f3a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f48:	d102      	bne.n	8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	61bb      	str	r3, [r7, #24]
      break;
 8001f4e:	e04a      	b.n	8001fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4a2d      	ldr	r2, [pc, #180]	@ (800200c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	085b      	lsrs	r3, r3, #1
 8001f5c:	61bb      	str	r3, [r7, #24]
      break;
 8001f5e:	e042      	b.n	8001fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8001f60:	4b25      	ldr	r3, [pc, #148]	@ (8001ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f70:	d108      	bne.n	8001f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8001f7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	e01f      	b.n	8001fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f8e:	d109      	bne.n	8001fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001f90:	4b19      	ldr	r3, [pc, #100]	@ (8001ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8001f9c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8001fa0:	61bb      	str	r3, [r7, #24]
 8001fa2:	e00f      	b.n	8001fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001faa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001fae:	d11c      	bne.n	8001fea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001fb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d016      	beq.n	8001fea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8001fbc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8001fc0:	61bb      	str	r3, [r7, #24]
      break;
 8001fc2:	e012      	b.n	8001fea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001fc4:	e011      	b.n	8001fea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001fc6:	f7ff fe85 	bl	8001cd4 <HAL_RCC_GetPCLK2Freq>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	0b9b      	lsrs	r3, r3, #14
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fde:	61bb      	str	r3, [r7, #24]
      break;
 8001fe0:	e004      	b.n	8001fec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001fe2:	bf00      	nop
 8001fe4:	e002      	b.n	8001fec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001fe6:	bf00      	nop
 8001fe8:	e000      	b.n	8001fec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001fea:	bf00      	nop
    }
  }
  return (frequency);
 8001fec:	69bb      	ldr	r3, [r7, #24]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3720      	adds	r7, #32
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	08002c70 	.word	0x08002c70
 8002000:	08002c80 	.word	0x08002c80
 8002004:	007a1200 	.word	0x007a1200
 8002008:	003d0900 	.word	0x003d0900
 800200c:	aaaaaaab 	.word	0xaaaaaaab

08002010 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e041      	b.n	80020a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7fe faac 	bl	8000594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3304      	adds	r3, #4
 800204c:	4619      	mov	r1, r3
 800204e:	4610      	mov	r0, r2
 8002050:	f000 fab2 	bl	80025b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e041      	b.n	8002144 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d106      	bne.n	80020da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f839 	bl	800214c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2202      	movs	r2, #2
 80020de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3304      	adds	r3, #4
 80020ea:	4619      	mov	r1, r3
 80020ec:	4610      	mov	r0, r2
 80020ee:	f000 fa63 	bl	80025b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr
	...

08002160 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d109      	bne.n	8002184 <HAL_TIM_PWM_Start+0x24>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b01      	cmp	r3, #1
 800217a:	bf14      	ite	ne
 800217c:	2301      	movne	r3, #1
 800217e:	2300      	moveq	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	e022      	b.n	80021ca <HAL_TIM_PWM_Start+0x6a>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	2b04      	cmp	r3, #4
 8002188:	d109      	bne.n	800219e <HAL_TIM_PWM_Start+0x3e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b01      	cmp	r3, #1
 8002194:	bf14      	ite	ne
 8002196:	2301      	movne	r3, #1
 8002198:	2300      	moveq	r3, #0
 800219a:	b2db      	uxtb	r3, r3
 800219c:	e015      	b.n	80021ca <HAL_TIM_PWM_Start+0x6a>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d109      	bne.n	80021b8 <HAL_TIM_PWM_Start+0x58>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	bf14      	ite	ne
 80021b0:	2301      	movne	r3, #1
 80021b2:	2300      	moveq	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	e008      	b.n	80021ca <HAL_TIM_PWM_Start+0x6a>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	bf14      	ite	ne
 80021c4:	2301      	movne	r3, #1
 80021c6:	2300      	moveq	r3, #0
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e05e      	b.n	8002290 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d104      	bne.n	80021e2 <HAL_TIM_PWM_Start+0x82>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021e0:	e013      	b.n	800220a <HAL_TIM_PWM_Start+0xaa>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d104      	bne.n	80021f2 <HAL_TIM_PWM_Start+0x92>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021f0:	e00b      	b.n	800220a <HAL_TIM_PWM_Start+0xaa>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d104      	bne.n	8002202 <HAL_TIM_PWM_Start+0xa2>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002200:	e003      	b.n	800220a <HAL_TIM_PWM_Start+0xaa>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2202      	movs	r2, #2
 8002206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2201      	movs	r2, #1
 8002210:	6839      	ldr	r1, [r7, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fc5c 	bl	8002ad0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a1e      	ldr	r2, [pc, #120]	@ (8002298 <HAL_TIM_PWM_Start+0x138>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d107      	bne.n	8002232 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002230:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a18      	ldr	r2, [pc, #96]	@ (8002298 <HAL_TIM_PWM_Start+0x138>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d00e      	beq.n	800225a <HAL_TIM_PWM_Start+0xfa>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002244:	d009      	beq.n	800225a <HAL_TIM_PWM_Start+0xfa>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a14      	ldr	r2, [pc, #80]	@ (800229c <HAL_TIM_PWM_Start+0x13c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d004      	beq.n	800225a <HAL_TIM_PWM_Start+0xfa>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a12      	ldr	r2, [pc, #72]	@ (80022a0 <HAL_TIM_PWM_Start+0x140>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d111      	bne.n	800227e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2b06      	cmp	r3, #6
 800226a:	d010      	beq.n	800228e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800227c:	e007      	b.n	800228e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f042 0201 	orr.w	r2, r2, #1
 800228c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40012c00 	.word	0x40012c00
 800229c:	40000400 	.word	0x40000400
 80022a0:	40000800 	.word	0x40000800

080022a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022be:	2302      	movs	r3, #2
 80022c0:	e0ae      	b.n	8002420 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b0c      	cmp	r3, #12
 80022ce:	f200 809f 	bhi.w	8002410 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80022d2:	a201      	add	r2, pc, #4	@ (adr r2, 80022d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d8:	0800230d 	.word	0x0800230d
 80022dc:	08002411 	.word	0x08002411
 80022e0:	08002411 	.word	0x08002411
 80022e4:	08002411 	.word	0x08002411
 80022e8:	0800234d 	.word	0x0800234d
 80022ec:	08002411 	.word	0x08002411
 80022f0:	08002411 	.word	0x08002411
 80022f4:	08002411 	.word	0x08002411
 80022f8:	0800238f 	.word	0x0800238f
 80022fc:	08002411 	.word	0x08002411
 8002300:	08002411 	.word	0x08002411
 8002304:	08002411 	.word	0x08002411
 8002308:	080023cf 	.word	0x080023cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	4618      	mov	r0, r3
 8002314:	f000 f9be 	bl	8002694 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699a      	ldr	r2, [r3, #24]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0208 	orr.w	r2, r2, #8
 8002326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699a      	ldr	r2, [r3, #24]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0204 	bic.w	r2, r2, #4
 8002336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6999      	ldr	r1, [r3, #24]
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	619a      	str	r2, [r3, #24]
      break;
 800234a:	e064      	b.n	8002416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fa04 	bl	8002760 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699a      	ldr	r2, [r3, #24]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699a      	ldr	r2, [r3, #24]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6999      	ldr	r1, [r3, #24]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	021a      	lsls	r2, r3, #8
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	619a      	str	r2, [r3, #24]
      break;
 800238c:	e043      	b.n	8002416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68b9      	ldr	r1, [r7, #8]
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fa4d 	bl	8002834 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	69da      	ldr	r2, [r3, #28]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 0208 	orr.w	r2, r2, #8
 80023a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	69da      	ldr	r2, [r3, #28]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0204 	bic.w	r2, r2, #4
 80023b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	69d9      	ldr	r1, [r3, #28]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	61da      	str	r2, [r3, #28]
      break;
 80023cc:	e023      	b.n	8002416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68b9      	ldr	r1, [r7, #8]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fa97 	bl	8002908 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	69da      	ldr	r2, [r3, #28]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	69da      	ldr	r2, [r3, #28]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	69d9      	ldr	r1, [r3, #28]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	021a      	lsls	r2, r3, #8
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	61da      	str	r2, [r3, #28]
      break;
 800240e:	e002      	b.n	8002416 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	75fb      	strb	r3, [r7, #23]
      break;
 8002414:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800241e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_TIM_ConfigClockSource+0x1c>
 8002440:	2302      	movs	r3, #2
 8002442:	e0b4      	b.n	80025ae <HAL_TIM_ConfigClockSource+0x186>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800246a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800247c:	d03e      	beq.n	80024fc <HAL_TIM_ConfigClockSource+0xd4>
 800247e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002482:	f200 8087 	bhi.w	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 8002486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800248a:	f000 8086 	beq.w	800259a <HAL_TIM_ConfigClockSource+0x172>
 800248e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002492:	d87f      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 8002494:	2b70      	cmp	r3, #112	@ 0x70
 8002496:	d01a      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0xa6>
 8002498:	2b70      	cmp	r3, #112	@ 0x70
 800249a:	d87b      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 800249c:	2b60      	cmp	r3, #96	@ 0x60
 800249e:	d050      	beq.n	8002542 <HAL_TIM_ConfigClockSource+0x11a>
 80024a0:	2b60      	cmp	r3, #96	@ 0x60
 80024a2:	d877      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024a4:	2b50      	cmp	r3, #80	@ 0x50
 80024a6:	d03c      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0xfa>
 80024a8:	2b50      	cmp	r3, #80	@ 0x50
 80024aa:	d873      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024ac:	2b40      	cmp	r3, #64	@ 0x40
 80024ae:	d058      	beq.n	8002562 <HAL_TIM_ConfigClockSource+0x13a>
 80024b0:	2b40      	cmp	r3, #64	@ 0x40
 80024b2:	d86f      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024b4:	2b30      	cmp	r3, #48	@ 0x30
 80024b6:	d064      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x15a>
 80024b8:	2b30      	cmp	r3, #48	@ 0x30
 80024ba:	d86b      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d060      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x15a>
 80024c0:	2b20      	cmp	r3, #32
 80024c2:	d867      	bhi.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d05c      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x15a>
 80024c8:	2b10      	cmp	r3, #16
 80024ca:	d05a      	beq.n	8002582 <HAL_TIM_ConfigClockSource+0x15a>
 80024cc:	e062      	b.n	8002594 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024de:	f000 fad8 	bl	8002a92 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80024f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	609a      	str	r2, [r3, #8]
      break;
 80024fa:	e04f      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800250c:	f000 fac1 	bl	8002a92 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800251e:	609a      	str	r2, [r3, #8]
      break;
 8002520:	e03c      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800252e:	461a      	mov	r2, r3
 8002530:	f000 fa38 	bl	80029a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2150      	movs	r1, #80	@ 0x50
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fa8f 	bl	8002a5e <TIM_ITRx_SetConfig>
      break;
 8002540:	e02c      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800254e:	461a      	mov	r2, r3
 8002550:	f000 fa56 	bl	8002a00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2160      	movs	r1, #96	@ 0x60
 800255a:	4618      	mov	r0, r3
 800255c:	f000 fa7f 	bl	8002a5e <TIM_ITRx_SetConfig>
      break;
 8002560:	e01c      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800256e:	461a      	mov	r2, r3
 8002570:	f000 fa18 	bl	80029a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2140      	movs	r1, #64	@ 0x40
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fa6f 	bl	8002a5e <TIM_ITRx_SetConfig>
      break;
 8002580:	e00c      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4619      	mov	r1, r3
 800258c:	4610      	mov	r0, r2
 800258e:	f000 fa66 	bl	8002a5e <TIM_ITRx_SetConfig>
      break;
 8002592:	e003      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
      break;
 8002598:	e000      	b.n	800259c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800259a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a2f      	ldr	r2, [pc, #188]	@ (8002688 <TIM_Base_SetConfig+0xd0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00b      	beq.n	80025e8 <TIM_Base_SetConfig+0x30>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025d6:	d007      	beq.n	80025e8 <TIM_Base_SetConfig+0x30>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a2c      	ldr	r2, [pc, #176]	@ (800268c <TIM_Base_SetConfig+0xd4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d003      	beq.n	80025e8 <TIM_Base_SetConfig+0x30>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002690 <TIM_Base_SetConfig+0xd8>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d108      	bne.n	80025fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a22      	ldr	r2, [pc, #136]	@ (8002688 <TIM_Base_SetConfig+0xd0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00b      	beq.n	800261a <TIM_Base_SetConfig+0x62>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002608:	d007      	beq.n	800261a <TIM_Base_SetConfig+0x62>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a1f      	ldr	r2, [pc, #124]	@ (800268c <TIM_Base_SetConfig+0xd4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d003      	beq.n	800261a <TIM_Base_SetConfig+0x62>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a1e      	ldr	r2, [pc, #120]	@ (8002690 <TIM_Base_SetConfig+0xd8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d108      	bne.n	800262c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	4313      	orrs	r3, r2
 800262a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a0d      	ldr	r2, [pc, #52]	@ (8002688 <TIM_Base_SetConfig+0xd0>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d103      	bne.n	8002660 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f023 0201 	bic.w	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	611a      	str	r2, [r3, #16]
  }
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	40012c00 	.word	0x40012c00
 800268c:	40000400 	.word	0x40000400
 8002690:	40000800 	.word	0x40000800

08002694 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002694:	b480      	push	{r7}
 8002696:	b087      	sub	sp, #28
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f023 0201 	bic.w	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f023 0303 	bic.w	r3, r3, #3
 80026ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f023 0302 	bic.w	r3, r3, #2
 80026dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a1c      	ldr	r2, [pc, #112]	@ (800275c <TIM_OC1_SetConfig+0xc8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d10c      	bne.n	800270a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f023 0308 	bic.w	r3, r3, #8
 80026f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f023 0304 	bic.w	r3, r3, #4
 8002708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a13      	ldr	r2, [pc, #76]	@ (800275c <TIM_OC1_SetConfig+0xc8>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d111      	bne.n	8002736 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	621a      	str	r2, [r3, #32]
}
 8002750:	bf00      	nop
 8002752:	371c      	adds	r7, #28
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40012c00 	.word	0x40012c00

08002760 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	f023 0210 	bic.w	r2, r3, #16
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800278e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	021b      	lsls	r3, r3, #8
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f023 0320 	bic.w	r3, r3, #32
 80027aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002830 <TIM_OC2_SetConfig+0xd0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d10d      	bne.n	80027dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a14      	ldr	r2, [pc, #80]	@ (8002830 <TIM_OC2_SetConfig+0xd0>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d113      	bne.n	800280c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	4313      	orrs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	621a      	str	r2, [r3, #32]
}
 8002826:	bf00      	nop
 8002828:	371c      	adds	r7, #28
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	40012c00 	.word	0x40012c00

08002834 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f023 0303 	bic.w	r3, r3, #3
 800286a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4313      	orrs	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800287c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	021b      	lsls	r3, r3, #8
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	4313      	orrs	r3, r2
 8002888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a1d      	ldr	r2, [pc, #116]	@ (8002904 <TIM_OC3_SetConfig+0xd0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d10d      	bne.n	80028ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002898:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	021b      	lsls	r3, r3, #8
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80028ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a14      	ldr	r2, [pc, #80]	@ (8002904 <TIM_OC3_SetConfig+0xd0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d113      	bne.n	80028de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80028c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	621a      	str	r2, [r3, #32]
}
 80028f8:	bf00      	nop
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bc80      	pop	{r7}
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40012c00 	.word	0x40012c00

08002908 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800293e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4313      	orrs	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	031b      	lsls	r3, r3, #12
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4313      	orrs	r3, r2
 800295e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a0f      	ldr	r2, [pc, #60]	@ (80029a0 <TIM_OC4_SetConfig+0x98>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d109      	bne.n	800297c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800296e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	019b      	lsls	r3, r3, #6
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	621a      	str	r2, [r3, #32]
}
 8002996:	bf00      	nop
 8002998:	371c      	adds	r7, #28
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	40012c00 	.word	0x40012c00

080029a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	f023 0201 	bic.w	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f023 030a 	bic.w	r3, r3, #10
 80029e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	621a      	str	r2, [r3, #32]
}
 80029f6:	bf00      	nop
 80029f8:	371c      	adds	r7, #28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f023 0210 	bic.w	r2, r3, #16
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	031b      	lsls	r3, r3, #12
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a3c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	621a      	str	r2, [r3, #32]
}
 8002a54:	bf00      	nop
 8002a56:	371c      	adds	r7, #28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b085      	sub	sp, #20
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f043 0307 	orr.w	r3, r3, #7
 8002a80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	609a      	str	r2, [r3, #8]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b087      	sub	sp, #28
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002aac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	021a      	lsls	r2, r3, #8
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	609a      	str	r2, [r3, #8]
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a1a      	ldr	r2, [r3, #32]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	43db      	mvns	r3, r3
 8002af2:	401a      	ands	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a1a      	ldr	r2, [r3, #32]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	621a      	str	r2, [r3, #32]
}
 8002b0e:	bf00      	nop
 8002b10:	371c      	adds	r7, #28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e046      	b.n	8002bbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a16      	ldr	r2, [pc, #88]	@ (8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d00e      	beq.n	8002b92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7c:	d009      	beq.n	8002b92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a12      	ldr	r2, [pc, #72]	@ (8002bcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d004      	beq.n	8002b92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a10      	ldr	r2, [pc, #64]	@ (8002bd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d10c      	bne.n	8002bac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	68ba      	ldr	r2, [r7, #8]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3714      	adds	r7, #20
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	40012c00 	.word	0x40012c00
 8002bcc:	40000400 	.word	0x40000400
 8002bd0:	40000800 	.word	0x40000800

08002bd4 <memset>:
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4402      	add	r2, r0
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d100      	bne.n	8002bde <memset+0xa>
 8002bdc:	4770      	bx	lr
 8002bde:	f803 1b01 	strb.w	r1, [r3], #1
 8002be2:	e7f9      	b.n	8002bd8 <memset+0x4>

08002be4 <__libc_init_array>:
 8002be4:	b570      	push	{r4, r5, r6, lr}
 8002be6:	2600      	movs	r6, #0
 8002be8:	4d0c      	ldr	r5, [pc, #48]	@ (8002c1c <__libc_init_array+0x38>)
 8002bea:	4c0d      	ldr	r4, [pc, #52]	@ (8002c20 <__libc_init_array+0x3c>)
 8002bec:	1b64      	subs	r4, r4, r5
 8002bee:	10a4      	asrs	r4, r4, #2
 8002bf0:	42a6      	cmp	r6, r4
 8002bf2:	d109      	bne.n	8002c08 <__libc_init_array+0x24>
 8002bf4:	f000 f81a 	bl	8002c2c <_init>
 8002bf8:	2600      	movs	r6, #0
 8002bfa:	4d0a      	ldr	r5, [pc, #40]	@ (8002c24 <__libc_init_array+0x40>)
 8002bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8002c28 <__libc_init_array+0x44>)
 8002bfe:	1b64      	subs	r4, r4, r5
 8002c00:	10a4      	asrs	r4, r4, #2
 8002c02:	42a6      	cmp	r6, r4
 8002c04:	d105      	bne.n	8002c12 <__libc_init_array+0x2e>
 8002c06:	bd70      	pop	{r4, r5, r6, pc}
 8002c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c0c:	4798      	blx	r3
 8002c0e:	3601      	adds	r6, #1
 8002c10:	e7ee      	b.n	8002bf0 <__libc_init_array+0xc>
 8002c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c16:	4798      	blx	r3
 8002c18:	3601      	adds	r6, #1
 8002c1a:	e7f2      	b.n	8002c02 <__libc_init_array+0x1e>
 8002c1c:	08002c84 	.word	0x08002c84
 8002c20:	08002c84 	.word	0x08002c84
 8002c24:	08002c84 	.word	0x08002c84
 8002c28:	08002c88 	.word	0x08002c88

08002c2c <_init>:
 8002c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2e:	bf00      	nop
 8002c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c32:	bc08      	pop	{r3}
 8002c34:	469e      	mov	lr, r3
 8002c36:	4770      	bx	lr

08002c38 <_fini>:
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	bf00      	nop
 8002c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3e:	bc08      	pop	{r3}
 8002c40:	469e      	mov	lr, r3
 8002c42:	4770      	bx	lr
